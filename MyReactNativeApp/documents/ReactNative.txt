React Native:

Code Evolution Channel :

1: 

React Fundementals and advanced concepts
React Hooks
react Typescript
React redux
React Router
React Testing
react Material UI
React Styles Components
React Storybook
React Query
React Table
React Formik
React Hook Form
React Render


What is React Naive:
   Its a Open Source Framework For building native Android and Ios Apps (Cross platform) using React [Developed by META]
   Using JS, We can access platform specific APIs (Such as Camera and Push Notifiacation)
   Uses React Components to define the apperance and behaviour of User Interface
   React itslef is a library designed for building user interfaces
   For Web apps -> react - dom
   For Android Apps -> react - native

Why react native ?
   iOS Apps require Swift or Objective-c
   Android apps require Java or Kotlin

   31% use ios and 68 % use android, So u need to develop 2 seperat apps using differnet technology

   With react native, You can create app that works seamlessly on both platforms
   Single team saving time and costs and maintenenace.
   If team knows react , thier expertise can extent to web app development as well

Prerequisites:
   Java script 
   React fundementas of react
    Function components
    States
    Props
    JSX
    Hooks





2 : Expo vs React native
    Expo is open source framework maintained by Expo Itself ( designed for building cross platform apps)

    Expo Proviced a sreamlined experience Unlike RN whihc can be challenging and time consuming to set up
    Expo has tools & Services build aroung RN , which simplifies the dev process
    With Plain RN , You cannot build iOS apps on windows or linux.Native iOS apps can only be built on macOS machine

    With Expo, You can develop apps on windows or linux and run it in physical iphone


    In the event that you require access to native android / ios code, Expo alloes you to eject your app and work with plaing RN Codebase.

3 : Fist RN APP ( Using Expo ) 
     Refer (https://reactnative.dev/docs/environment-setup)
     * Install Node js
     * Install VS code 

     Create A Folder and open it in VS Code
     
     -> npx create-expo-app@latest HelloWorld
       - cd HelloWorld
	   - npm run android
	   - npm run ios
	   - npm run web

	  package.json :
	    -> has Dependencies/scripts and metadata
	  (Check Video) 
	  babel.config.js :

	  app.json 
	     ->has Configuration option for the project  
	     -> These options alter the project behaviour during development , building ,submitting and updating the app

	  App.js : 
	     ->  Serves as the default screen for the project
	     ->  It acts as the Root file when you start the development server with npm start
	     -> 

4 : Running	Expo APP (In Physical Device)
     * ios simulator
     * Android emulator

    Download Expo GO
    Scan QR
    Phone and Mac should be on Same network
    
    navigate to app folder
    cd HelloWorld
    npm start / npx expo start

5 : Running	Expo APP ( iPhone Simulator)
        
Download Xcode :(

6 : Running Expo APP ( Android Studio)    
    
    https://developer.android.com/studio
    * Standard setup step

    Once the APP is opened 
     -> More Settings -> Virtual Device Manager
     -> Create device (Make sure it has playsoter ikon)

     Click on a in VS code terminal will install Expo GO in your virtual device.

7 : React Native Core Components :
    https://reactnative.dev/docs/intro-react-native-components
    React Navtive components :
      -> Native compnents
      -> Core components
      -> Community components

    React native does not incorporate DOM. So JSX Tags that we use in react wont work ( <div> <p>).

    In Android/Ios , we use "view" for user interfaces

    View :
        -> Small rectangular element on screen that can display text, images, or respond user input
     In Android
 , : "View" are written in Kotlin or Java
     In iOS : "View"   are written in Swift or Objective-C
     RN : View are written in JS through React Components
     At runtime, RN generates corresponding Android & ios Views for these components. 

     We call these platform-backed components Native Components.
     React Native comes with a set of essential, ready-to-use Native Components you can use to start building your app today. These are React Native's Core Components.

     Community components : https://reactnative.directory/
     

     RN UI Components 
     RN 			Android  		IOS          Web Analog
     <view>         <ViewGroup>.     <UIView>    non scrolling <div>              
     <Text>                                      <p>                              
     <Image>									  <img>
     <ScrollView>								 <div>
     <TextInput>     							 <input type ="text">

     import core components from react-native library
     import {StyleSheet, Text , View } from "react-native"

  8: View Component:
     https://reactnative.dev/docs/components-and-apis
     https://reactnative.dev/docs/view

     The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.

	 View is designed to be nested inside other views and can have 0 to many children of any type


    npx create-expo-app@latest CoreComponents --template blank@sdk-49
     
    View Compnent only occupies the space taken by its children.
    flex : 1 -> takes up all available space in scren

  9: Text Component
  https://reactnative.dev/docs/text
  A React component for displaying text.
  Text supports nesting, styling, and touch handling.
   
  Read about MyAppText in the doc

  10 : Image Component
  https://reactnative.dev/docs/image
  https://reactnative.dev/docs/imagebackground

  Note that for network and data images, you will need to manually specify the dimensions of your image!

  11 : Scroll View
  https://reactnative.dev/docs/scrollview

  Component that wraps platform ScrollView while providing integration with touch locking "responder" system.
   ScrollViews must have a bounded height in order to work, since they contain unbounded-height children into a bounded container (via a scroll interaction). In order to bound the height of a ScrollView, either set the height of the view directly (discouraged) or make sure all parent views have bounded height. Forgetting to transfer {flex: 1} down the view stack can lead to errors here, which the element inspector makes quick to debug.

  <ScrollView> vs <FlatList> - which one to use?

  ScrollView -> Renders fully
  FlatList -> Renders lazily

  12 : Button
  https://reactnative.dev/docs/button

  A basic button component that should render nicely on any platform. Supports a minimal level of customization.

If this Buttonton doesn't look right for your app, you can build your own button using Pressable

 13 : Pressable
 https://reactnative.dev/docs/pressable

 Pressable is a Core Component wrapper that can detect various stages of press interactions on any of its defined children.
 
 Check the image in docs.
  
 If you want to create custom button , use Pressable 

 14 : Modal
 https://reactnative.dev/docs/modal
 The Modal component is a basic way to present content above an enclosing view.
  
 onRequestClose is called when back button is clicked


 15 : Status Bar
 https://reactnative.dev/docs/statusbar
 Component to control the app's status bar. The status bar is the zone, typically at the top of the screen, that displays the current time, Wi-Fi and cellular network information, battery level and/or other status icons.
 
   barStyle -> text color of status bar

 16 : Activity Indicator
 https://reactnative.dev/docs/activityindicator
 Displays a circular loading indicator.

  
 17 : Alert
 https://reactnative.dev/docs/alert
  
 Development -> Apis. 

 Use State variable for animating prop
 Its a API that generate UI elements.

 IN IOS You can specify any number of buttons
 In Android , Its only 3

 18 : Custom components
 Refer greet.js

 We can create custom Reuable component like custom button , custom view etc...
 
 19 : Styling
 
 https://reactnative.dev/docs/style
 https://reactnative.dev/docs/stylesheet

 RN Doesnot use CSS for styling
 You style using JS
 names are written in camel case
 Ex : backgroundColor instead of background-color
 
   Styling Approach:
    -> Inline style (Non Recomended)
    -> StyleSheet API

  -> Styling various core components
  -> Styling across iOS and Android
 
 https://reactnative.dev/docs/height-and-width
 Doc : HeightAndWidth.js
 Fixed Dimensions:
 The general way to set the dimensions of a component is by adding a fixed width and height to style. All dimensions in React Native are unitless, and represent density-independent pixels.

 There is no universal mapping from points to physical units of measurement. This means that a component with fixed dimensions might not have the same physical size, across different devices and screen sizes. However, this difference is unnoticeable for most use cases.




 20 : StyleSheet API
  A StyleSheet is an abstraction similar to CSS StyleSheets
  
  Why Style Sheet API:
   * Reusable /Oraganized /Easy to read / maintainable code
   * Move the inline styles to style sheet api and name it like (container / title) and use it in diff other components.
   This avoids duplication
   * When there are more number of styles to be added for compoentn ,inline style will not look good. So prefer Stylesheet api
   
 21 : Multiple styles
     Extract the common styles

     you can also pass an array of styles - the last style in the array has precedence, so you can use this to inherit styles. 
     {[styles.lightGreenBox,styles.box]
     if you have some bordercolor in lightGreenBox,
     It will be overridden by styles.box

 22 : Box Model
 Margin 
   Border
     Padding
       Content

 Margin property will give margin every side of the section. marginHorizontal in this case will give margin left and right in short X axis. Lastly marginVertical is responsible for margin Top and Bottom which in a word margin Y axis

 In RN , All dimensions are unitless and represent density independent pixels
 
 width , height can be in percentage
 Additionllay we can use paddingTop , bottomHorizontal .... 

  paddingHorizontal applies padding to the left and right sides of the element.
  It is equivalent to setting both paddingLeft and paddingRight to the same value.
  This property is useful when you want to add equal padding to the left and right sides of an element without affecting its top and bottom padding.

  BorderRadius Works in View Component in Both Platforms
  In text , BorderRadius Works in Android not in ios
  

 23 : Shadow and elevation 
 In Web, We specify box-shadow : h-offset, v-offset , blur , spread , color
 
 Shadow differs b/w Ios and android.
 In Android Elevation

 24 : Style Inheritance

 IN CSS , Setting style in DIV will be applied to nested childs <p> tags
 <div>
   <p> </p> 
 </div>
 P inhertis from Div

 In RN , Its not possible.
 <View>
  <Text>
  </Text>
 </View>

 Text will not inherti from view

 https://reactnative.dev/docs/text#limited-style-inheritance
 React Native still has the concept of style inheritance, but limited to text subtrees.
 Following Style inheritance is possible
 <Text>
  <Text>
  </Text>
 </Text> 

 ##Check the Style sheet docs in RN Docs (Yet to do)

 25 : Layout with Flexbox
 https://reactnative.dev/docs/flexbox
 A component can specify the layout of its children using the Flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.

Flexbox works the same way in React Native as it does in CSS on the web, with a few exceptions. The defaults are different, with flexDirection defaulting to column instead of row, alignContent defaulting to flex-start instead of stretch, flexShrink defaulting to 0 instead of 1, the flex parameter only supporting a single number.

flex 1 , flex 2 , flex 3
1/6 ; 2/6 ; 3 /6

Default values :
flexDirection -> column instead of row, 
alignContent -> flex-start instead of stretch, 
flexShrink ->  0 instead of 1, 
the flex parameter only supporting a single number.

Flex BoxHas 2 items :
 -> Flex Container
 -> Flex items

 <View> -> Flex Container
   <View>1</View> -> Flex Item
   <View>2</View>
 </View>

 Axes:
  -> main Axis ( Top to Bottom )
  -> Cross Axis (Left to Right)

 26 : Code Setup
 26_CodeSetup.js

 27 : Flex
 https://reactnative.dev/docs/flexbox

 View by Default has flex. (Created based on children)
 If no children, it will not be visible.
 To occupy th whole screen use flex :1 .
 
 If no flex is added , then only the existin prop of box is considered.. 

 28 : Flex Direction
      column 
      column-reverse
      row
      row-reverse

column (default value) Align children from top to bottom. If wrapping is enabled, then the next line will start to the right of the first item on the top of the container.

row Align children from left to right. If wrapping is enabled, then the next line will start under the first item on the left of the container.

column-reverse Align children from bottom to top. If wrapping is enabled, then the next line will start to the right of the first item on the bottom of the container.

row-reverse Align children from right to left. If wrapping is enabled, then the next line will start under the first item on the right of the container.

 29 : Justify Content
 |------> Cross
 |
 |
 |
 |
 +
Main

 justifyContent describes how to align children within the main axis of their container

 For example, you can use this property to center a child horizontally within a container with flexDirection set to row or vertically within a container with flexDirection set to column.

 30 : Align Items

 alignItems describes how to align children along the cross axis of their container. It is very similar to justifyContent but instead of applying to the main axis, alignItems applies to the cross axis.
 
 31 : Align Self

 alignSelf has the same options and effect as alignItems but instead of affecting the children within a container, you can apply this property to a single child to change its alignment within its parent. alignSelf overrides any option set by the parent with alignItems.
 
 alignItem -> default value is stretch
 alignSelf -> default auto -> it take from parent

 32 : Flex Wrap
 The flexWrap property is set on containers and it controls what happens when children overflow the size of the container along the main axis. By default, children are forced into a single line (which can shrink elements). If wrapping is allowed, items are wrapped into multiple lines along the main axis if needed.

When wrapping lines, alignContent can be used to specify how the lines are placed in the container. Learn more here.
 
 flexWrap -> wrap / nowrap /wrap-reverse

 33 : Aligh Content
 alignContent defines the distribution of lines along the cross-axis. This only has effect when items are wrapped to multiple lines using flexWrap.
 

 34 : Gap
 Manage Space b/w rows and columns
 Row Gap -> Space b/w rows
 Column Gap -> Space b/w columns
 Gap -> when Both Rows & Column space are same


 35 : Flex Basis
 Setting the flexBasis of a child is similar to setting the width of that child if its parent is a container with flexDirection: row

 setting the height of a child if its parent is a container with flexDirection: column.

 The flexBasis of an item is the default size of that item, the size of the item before any flexGrow and flexShrink calculations are performed.

 
 36 : Flex Shrink
 flexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis

 Child 1 -> fluxShrink : 1
 Child 2 -> fluxShrink : 2

 Child 2 will be shrinked twice that of child 1

 37 : Flex Grow
 flexGrow describes how much space within a container should be distributed among its children along the main axis. 
 
 Child 1 -> fluxGrow : 1
 Child 2 -> fluxGrow : 3

 Child 2 will be expanded thrice that of child 1

 Flex Implicitly sets flexShrink to 1 & flexBasis to 0
 Flex : <positive number> 
 FlexGrow : <Positive number>
 flexShrink : 1
 flexBasis : 0
 
 38 : relative and absolute layout

 The position type of an element defines how it is positioned within its parent.

absolute When positioned absolutely, an element doesn't take part in the normal layout flow. It is instead laid out independent of its siblings. The position is determined based on the top, right, bottom, and left values.
{{{It does not align based on child.. its based on Parent}}}

When to use ? When you want something to be in precious position

relative (default value) By default, an element is positioned relatively. This means an element is positioned according to the normal flow of the layout, and then offset relative to that position based on the values of top, right, bottom, and left. The offset does not affect the position of any sibling or parent elements.

{{aligned based on siblings}}

39 : Dynamic User Interface
Currently our learning is based on iphone 14+ and pixel 8 pro
Our app users wont all be using identical devices
Device sizes may vary ranging from compact phones tp larger devices like ipads and androis tablets.

Our app ui should be responsive in diff devices..

On Same device , a user might opt for potraid mode other may opt for landscape mode

40 : Dimension API

Press Shift + I 
Select i pad..
Check if the expo is installed...

Box is not look good in Ipad when compared to Iphone 15+

Dimension :
 -> Screen -> Entire physical display of the device (Include notch/ status bars / System NAV Bars)
 -> Window -> Area occupied by APPs ui
 
 Dimension API  has some drawbacks. that prevents it from using it fro creating Synamic user interface

 41 : Dimension API drawback
  -> When the device orientation changes , width and height changes... But this will not update the Dimension APIs widht and height..

  Update the orientation as default in app.json (to toggle b/w potrait and landscape)

  Now the height & widht values will be changed ,but its not reflected...

   Only when the device is restated. , the values are changed.. ( Click on the ios device and click R)
   LOG  rendering  {"windowWidth": 932} {"windowHeight": 430}
   LOG  rendering  {"windowWidth": 430} {"windowHeight": 932}

   Use Use state...

 42 : useWindowDimensions
 https://reactnative.dev/docs/usewindowdimensions
 useWindowDimensions automatically updates all of its values when screen size or font scale changes. You can get your application window's width and height like so:

 const {height, width} = useWindowDimensions();

 43 : SafeAreaView
 https://reactnative.dev/docs/safeareaview
 The purpose of SafeAreaView is to render content within the safe area boundaries of a device. It is currently only applicable to iOS devices with iOS version 11 or later.

SafeAreaView   nested content and automatically applies padding to reflect the portion of the view that is not covered by navigation bars, tab bars, toolbars, and other ancestor views. Moreover, and most importantly, Safe Area's paddings reflect the physical limitation of the screen, such as rounded corners or camera notches (i.e. the sensor housing area on iPhone 13).

It check the safe area of that device and then renders the view

 44 : Perform Specific code

 https://reactnative.dev/docs/platform-specific-code

 When developing a cross platform app , maximizing code reuse is a prioroty

 There are situations wherre it becomes necessary to tailor code to sepcifi platform

 RN offers 2 ways for organizing and separating platform specific code
  * Platform module (This can be used for small changes -> PlatformSafeAreaViewComp.js)

  * Platform specific file extensions
  When your platform-specific code is more complex, you should consider splitting the code out into separate files. React Native will detect when a file has a .ios. or .android. extension and load the relevant platform file when required from other components.
  

  Pro tip: Configure your Web bundler to ignore .native.js extensions in order to avoid having unused code in your production bundle, thus reducing the final bundle size.

 45 - 50 :
  -> Pokemon cards

  << Section 7 >
  51 : List

  rendering list is an essential aspect of mobile application developemnet. Whether its list of comtacts , 
  
  map method is used to render list..

  **** Key prop is essentional for react to effectianl to update the list . It helps react identify which item is modified..

  Rendegin List with scroll view & Map is not the preferred technique...

   Disadvantage :
    -> UI renders all the 100 items even if they are not there in. UI View.. 
    -> Check console.log

  52 : Flat List : https://reactnative.dev/docs/flatlist

   -> Reneders only the items currently in the view. making it highly performant for long lists..
   -> Mandatory props :
      -> data -> array of data
      -> renderitem -> is a fucntion that return jsx for each item in list

    -> Check the console logs for lazy loading..
       
    KeyExtractor Property:
     -> keyExtractor tells the list to use the ids for the react keys instead of the default key property.

     -> By passing extraData={selectedId} to FlatList we make sure FlatList itself will re-render when the state changes. Without setting this prop, FlatList would not know it needs to re-render any items because it is a PureComponent and the prop comparison will not show any changes.

     -> Used to extract a unique key for a given item at the specified index. Key is used for caching and as the react key to track item re-ordering. The default extractor checks item.key, then item.id, and then falls back to using the index, like React does.

  53 : Item Seperator
       ItemSeparatorComponent: Rendered in between each item, but not at the top or bottom. 
       
       Comment // marginBottom: 16 add new view with height 16
       

       marginBottom-> Creates un necessary sapce at the bottom of the last list element
    
  54 : List Empty 
       Rendered when the list is empty. Can be a React Component (e.g. SomeComponent), or a React element (e.g. <SomeComponent />).

       Empty the array in data.json and try this..
       or 
       data={[]}

  55 : List Header & Footer
       ListHeaderComponent : Rendered at the top of all the items
       ListFooterComponent : Rendered at the bottom of all the items

  56 : Section List
       
       SectionSeparatorComponent : Rendered at the top and bottom of each section (note this is different from ItemSeparatorComponent which is only rendered between items)

       This is a PureComponent which means that it will not re-render if props remain shallow-equal.Make sure that everything your renderItem function depends on is passed as a prop (e.g. extraData) that is not === after updates, otherwise your UI may not update on changes. This includes the data prop and parent component state.

       
  57 : Inputs & Forms

       In Web development , we have lots of HTML elements at our disposal to capture user inputs
       Ex : Inout fields / text areas / dropdowns / checkboxs / radio groups / and many more..

       Core RN Library only provides : Text Input and Swithch

       Expo expands our toolkit , offering additional components like checkbox , date picker through EXPO SDK..

       Forms RN :
       * Managing Form State
       * Handling Form Validations
       * Displaying Validation Messages
       * Submitting Form Data


  58 : Text Input 
  A foundational component for inputting text into the app via a keyboard. Props provide configurability for several features, such as auto-correction, auto-capitalization, placeholder text, and different keyboard types, such as a numeric keypad.

  The most basic use case is to plop down a TextInput and 
  ####
  subscribe to the onChangeText events to read the user input
  ####

  {{
  WIthout proper styles text input wont be visible in screen
  CMD + Shift + k -> open key borad in IOS
  }}
  
  Note that some props are only available with multiline={true/false}. Additionally, border styles that apply to only one side of the element (e.g., borderBottomColor, borderLeftWidth, etc.) will not be applied if multiline=true. To achieve the same effect, you can wrap your TextInput in a View:

  59 : Text Input Props
  -> placeholder
  -> securetextentry --> password
  -> keyboardtype -> email-address /numeric
  -> autocorrect -> default false....
  -> autoCapitalize ->

  60 : Multi Line text input

  MUlti Line Focus :
    -> Center in Android  (To Resolve this 
    add textAlignVertical : "top")
    -> Top in IOS

  61 : Swith
  
  This is a controlled component that requires an onValueChange callback that updates the value prop in order for the component to reflect user actions. If the value prop is not updated, the component will continue to render the supplied value prop instead of the expected result of any user actions.
   
  Thumb Color -> Color of the toggle circle
  Track Color -> Color of the horizontal Area
  
  62 : Login Form

  LoginForm.js

  63 : KeyboardAvoidView

  https://reactnative.dev/docs/keyboardavoidingview

  This component will automatically adjust its height, position, or bottom padding based on the keyboard height to remain visible while the virtual keyboard is displayed.
  

  behavior:
  Android and iOS both interact with this prop differently. On both iOS and Android, setting behavior is recommended.

  keyboardVerticalOffset
  This is the distance between the top of the user screen and the react native view, may be non-zero in some use cases.

  64 : Form Validation
   
  LoginForm.js

  65 : Form Submission
  
  LoginForm.js

  Section 9:
  66 : Networking

  https://reactnative.dev/docs/network
  https://developer.mozilla.org/en-US/docs/Web/API/Request

  Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may need to fetch a chunk of static content from another server.


  
  
  * Fetching and submitting data to an api
  * Loading states
  * Error Handling
  * Flat List component to display our data

  Sample APIS:
  https://jsonplaceholder.typicode.com/

  Known Issues with fetch and cookie based authentication

  67 : GET Requests
  
  NetworkingGetPostErrorHandling.js

  68 : Loading State
   
  isLoading -> When data is fetchied for first time
  
  69 : Pull To Refresh

  When a list is pulled down, a default loading spinner will be displayed..

  70 : POST Request  
  
  NetworkingGetPostErrorHandling.js

  71 : Error handling
  
  NetworkingGetPostErrorHandling.js

  In Andorid , Local Host will not work.. use computer ip address..


  Section 10 :
  72 : Navigation

  
  Soln : React Navigation Library 
  https://reactnative.dev/docs/navigation#react-navigation
  https://reactnavigation.org/docs/getting-started

  Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.
  
  React Navigation provides a variety of navigators lie 
  * Stack
  * Drawer
  * Tab Navigator

  Stack Navigator: Provides a stack-based navigation model, where screens are stacked on top of each other.
  
  Tab Navigator: Displays tabs at the bottom (or top) of the screen, allowing users to switch between different screens or tabs.
  
  Drawer Navigator: Creates a side menu that can be opened by swiping from the left (or right) side of the screen.
 
  Switch Navigator: Renders only one screen at a time and is useful for authentication flows.

  Create new project
  npx create-expo-app@latest ReactNavigation

  cd ReactNavigation

  https://reactnavigation.org/docs/getting-started
 
  npm install @react-navigation/native
  
  npx expo install react-native-screens react-native-safe-area-context
  
  Now, we need to wrap the whole app in NavigationContainer. Usually you'd do this in your entry file, such as index.js or App.js:

  73 : Stack navigation

  Stack Navigator vs Native Stack navigator

  Stack Navigator in React Navigation:

  React Navigation's Stack Navigator is a JavaScript-based navigation solution provided by the React Navigation library.
  
  It implements a stack-based navigation model, where screens are stacked on top of each other.
  
  Each time you navigate to a new screen, it is pushed onto the stack, and going back removes the top screen from the stack (popping).
  
  React Navigation's Stack Navigator is a cross-platform solution and does not rely on native platform navigation components.

  Native Navigation Components:

  On the other hand, native stack navigators refer to the built-in navigation components provided by the native platform (e.g., UINavigationController on iOS and FragmentManager on Android).
  
  These native navigation components are part of the iOS and Android SDKs and are used to manage navigation within native apps.
  
  React Native itself provides a way to interact with native navigation components through native modules and bridges, allowing you to integrate native navigation components into your React Native app if needed.


  We are going to look as Native navigator as high level customozation is not required currenlty

  https://reactnavigation.org/docs/native-stack-navigator

  npm install @react-navigation/native-stack
  

  74 : Navigation b/w Screens
  1) Navigation Prop
  2) Navigation Hook

   Navigation Prop vs Navigation Hook (Check Chat GPT)

  In summary, both the Navigation Prop and Navigation Hook provide a way to access navigation functionality within components. The Navigation Prop is typically used in class components and functional components that receive props, while the Navigation Hook is specifically designed for functional components and provides a more concise way to access navigation functionality without the need for props. Choose the method that best fits your component's requirements and coding style.

  75 : Passing Data b/w screens

  route -> this prop is provided to all screen compoennets
        -> we can access the params sent from prev screen using this. (route.params)
  
  We can also sent some default values
   -> use initalParams in the Stack.Screen
   -> If no data is sent from prev to next screen.. this default value set at the screen level will be used


  useLayoutEffect();


  76 : Stack Navigation options
  
  options={{
          title: 'Welcome Home !!!',
          headerStyle: {
            backgroundColor: 'green'
          },
          headerTintColor: 'white',
          headerTitleStyle: {
            fontWeight: 'bold',
            fontSize: 14
          },
          headerRight: () => (
            <Pressable onPress={() => { Alert.alert('Menu Clicked') }}>
              <Text style={{ fontSize: 16, color: 'white' }}> Menu </Text>
            </Pressable>
          ),
          contentStyle: {
            backgroundColor: "lightgreen"
          }

  To Use this options across all screens ,use screenoptions in
  <Stack.Navigator>

  77 : Dynamic Stack Navigation Options
   
   Instead of static title for Screen,we might want to have a dynamic one..
   Ex: Hello + {NAME}
   
   -> Using Options

           options={({ route }) => ({
            title: route.params.name
          })}


   -> useLayoutEffect

       const { name } = route.params;
    
    useLayoutEffect(() => {
        navigation.setOptions({
            title: name,
        });
    }, [navigation, name]);

  78 : Drawer Navigation

  It introduces a hidden menu, sliding from either side of screen
  Its beneficial in apps with multiple main secitons that require a neat and organized navigation structure..

  npm install @react-navigation/drawer
  npx expo install react-native-gesture-handler react-native-reanimated
   plugins: [
      ...
      'react-native-reanimated/plugin',
    ],

   npm start -- --reset-cache
   or
   "start": "expo start -c",

   we can also use button to open drawer
   -> navigation.toggleDrawer();
   
   Move to Other Screen
    -> navigaiton.jumpTo("<Screen name")

    -> Check teh drawer.. it will be active..
   
  79 : Drawer navigation options

            options={{
            title: "My dashboard",
            drawerLabel: "Dashboard label",
            drawerActiveTintColor: "#333",
            drawerActiveBackgroundColor: "lightblue",
            drawerContentStyle: {
              backgroundColor: "#c6cbef",
            },

  80 : Tab Navigation

  https://reactnavigation.org/docs/bottom-tab-navigator

  Switch b/w differnet tabs by tapping on a tab usually displayed at bottom of screen

  npm install @react-navigation/bottom-tabs


  81 : Tab Navigation Options

    screenOptions={{
                //   tabBarShowLabel: false,
                tabBarLabelPosition: "below-icon",
                tabBarActiveTintColor: "red",
            }}


  82 : Nesting Navigations

  Nesting navigators allows us to combine powers of diff types if navigators , creating seamless and organized user experience

  Ex : Stack navigator Within Tab navigator

  headerShown: false -> To show stack header and hide the tab header


###########################################################################   Javascript ####################################################

Promise : 

A Promise is an object that represents the eventual completion or failure of an asynchronous operation and its resulting value. A Promise can be in one of three states: pending, fulfilled, or rejected.

Pending: Initial state, neither fulfilled nor rejected.
Fulfilled: The operation completed successfully, and the promise has a value.
Rejected: The operation failed, and the promise has a reason for the failure.
Promises have two important methods:

then(): Allows you to specify what to do when a promise is resolved (fulfilled) or rejected.
catch(): Allows you to specify what to do when a promise is rejected.


Async - Await:

async: The async keyword is used to declare an asynchronous function. It ensures that the function returns a promise.


await: The await keyword is used inside an async function to wait for the completion of a promise. It can only be used inside async functions.

await myPromise waits for the myPromise to be resolved or rejected. If it resolves, the value is stored in the result variable, and the code continues execution. If it rejects, an error is thrown, and it's caught by the catch block.


Read : Js Top networking libraries with get post put delete exampels In Chat GPT



########################################################################################################################################################################################################################
Native CLI :
 https://reactnative.dev/docs/environment-setup
 -> Install node & Watchman
 -> Set Up java home
 -> Remove Walmart related stuff from .npmrc
 -> npx react-native@latest init MyReactNativeCLIWM
 -> To Run IN VPN
    -> Setup 
       -> Modify the distributionUrl in android/gradle-wrapper.properties
       -> distributionUrl=https://repository.walmart.com/repository/gradle_distros/gradle-8.3-all.zip

       -> Modify repositories in build.gradle
        google()
        mavenCentral {
            setUrl("https://repository.walmart.com/content/repositories/public")
        }
 
        maven { url "https://repository.walmart.com/content/repositories/atlassian-public/" }
        maven { url "https://repository.walmart.com/content/groups/public" }
        maven { url "https://repository.walmart.com/content/repositories/pangaea_snapshots/" }
        maven { url "https://repository.walmart.com/content/repositories/pangaea_releases/" }
        maven { url 'https://repo.wal-mart.com/content/repositories/snapshots' }
        maven { url "https://repo.wal-mart.com/content/repositories/walmart" }
        maven { url "https://repository.walmart.com/content/repositories/jcenter" }
        maven { url "https://repository.walmart.com/content/repositories/central/" }
        jcenter {
            setUrl("https://repository.walmart.com/content/repositories/jcenter")
        } 

-> Start metro :: npm start
-> Open Android Studio & Start the mobile
-> npm run android

 ** npx react-native start --experimental-debugger ** 


#######################################################################################################################################################################################################################Code Evolution Redux :
 

1 ) React Redux : Introduction 

Redux is a JS library for predictable and maintainable global state management.

Redux is for java script app :
  -> It can beused with react , angular , vue ,even vanilla js
  -> Its not tightly coubled with React

Redux is state container:
 -> It stores the state of app
 ->   

Redux is predictable :
 -> The change made to our app is predictable


Using useState wil be tough for a huge application
(Check ppt video)

useContext + useReducer ??


React is a library to build UI
Redux is a state management libraty
React-Redux is a library that provied binding to use React and Redux together in an application


Few points before we proceed :
 -> Learn React and then Redux
 -> Redux can be achived with useContext + useReducer hooks but still it cant match the ecosystem
 -> when should i use redux in my react app ?
    -> that depends on app . if there are lot of screens that has to share the state... we can use redux
 ->   


2 : Set up projext

  -> Node and Npm installed
  -> npm init --yes (to initalize an app with default package.json)
  -> npm install redux
  -> Create a js file index.js
  -> write a console.log 
  -> then run -> node index

3 : Three Core Concepts
  
  Cake Shop Scenario :
     Shop keeper get the action BUY from customer 
     and then removed a cake from Shelf (Store) 

  -> Store  {Shop} Holds the state of applicaiton
  -> Action {Want to buy cake}  
  -> Reducer  {Shop keeper} ties the store and actions together


Store  : Holds state of applicaion
Adtion : Describes changes in state of applicaiton
Reducer : Carries out the state transition depending on action

 4: Three Principles
 
 -> The state of whole application is stored in object tree with a single store
 -> The only way to change the state is to emit action, an object describing what happened
 -> To specify how the state tree is transformed by actions, write pure reducers

 Reducer - (previousState, action) => newState

 To update the Redux store, the APP has to dispatch an action

JS APP -> Dispatches action to REDUCER whihc will update the state and returns a state -> JS APP

 5: Actions
 -> JS object that should have type property
 -> Action creatr is function that return the actoin

 function buyCake(){
 return {
   type : "BUY_CAKE",
   info : "Buy cake action"
 }
 }

 6 : Reducers
 
 reducer = (state,action) => new State
 -> we are not mutating the exsting state, we create new one

 7 : Store

 * One Store for entire application
 * getState() -> used to get he state from store 
 * dispatch(action) -> allow state to be updated
 * registers listners via subscribe(listner)
 * Handles unregistering of listners via functin returned by subscribe(listner)

 ### simple node import vary with react import

 8 : Cake and ice creams
  
 2 shop keeper managing cake and icecreams
 // Single reducer to manage all actions

 9 : Multiple Reducers

 //// Multiple Reducers to manage individual actions

 10 : combine Reducers
 
 When an actions is dispatched, both the reducers are recived the actions
 One Reducers acts on that actios
 Other ignore it.

 11 : Middleware
 -> Extend redux with custom functionality
 -> Provides 3rd party extentsion point b/w dispatching an actions, then moment it reaches the reducer
 -> used for loggin, crash reporting , perfirm async taks

 npm install redux-logger
 
 Updated Combined State  { cake: { numOfCakes: 9 }, iceCream: { numOfIceCreams: 20 } }
 action BUY_CAKE @ 12:48:42.196
   prev state { cake: { numOfCakes: 10 }, iceCream: { numOfIceCreams: 20 } }
   action     { type: 'BUY_CAKE', info: 'Buy cake action' }
   next state { cake: { numOfCakes: 9 }, iceCream: { numOfIceCreams: 20 } }

 12 : Async Actions
 
 //We have seen sync actions so far..

 state = {
  loading : true , // used in UI for displaying loading spinner in component
  data : [] ,
  error : ''
 }
 
 Actions :

 FETCH_USERS_REQUEST - Fetch list of users
 FETCH_USERS_SUCCESS - Fetch Successfullt
 FETCH_USERS_FAILURE - Error fetching the data

 Reducer :
 
 case : FETCH_USERS_REQUEST
  -> loading : true
 case : FETCH_USERS_SUCCESS
  -> loading : false
  -> users : data 
 case :  FETCH_USERS_FAILURE
   -> loading : false
   -> set error

 asyncActions.js
  
 13 : Redux Thunk Middleware
 
  throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);

 Axios :
  -> Request to an api end point

 Redux - Thunk :
  -> DEfine async action creations 

 npm install axios redux-thunk
 npm install redux-thunk
  
  










#######################################################################################################################################################################################################################



React Native Check List :
1) Create App With CLI
2) Localization 
3) Integrate CCM
3) Impersonate (Later)
4) Fluffy (Need to Disucss)
5) Redux
6) Fontsetup
7) Splash Screen setup (Later)

React Native Application :
 -> Create a new application
 -> What are inital setup should be done ?


Pfed Onboarding Request.. Dev onboarding...
Tc(Touch Computer) - 52 72 ..


-- Shoaib :

-> Get Boiler plate code
-> Update SSP
-> Do we have camera aceess / walmart libraries
-> 


